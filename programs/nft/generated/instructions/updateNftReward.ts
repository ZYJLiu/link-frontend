/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category UpdateNftReward
 * @category generated
 */
export type UpdateNftRewardInstructionArgs = {
  rewardBasisPoints: beet.bignum
}
/**
 * @category Instructions
 * @category UpdateNftReward
 * @category generated
 */
export const updateNftRewardStruct = new beet.BeetArgsStruct<
  UpdateNftRewardInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['rewardBasisPoints', beet.u64],
  ],
  'UpdateNftRewardInstructionArgs'
)
/**
 * Accounts required by the _updateNftReward_ instruction
 *
 * @property [_writable_] rewardData
 * @property [**signer**] user
 * @category Instructions
 * @category UpdateNftReward
 * @category generated
 */
export type UpdateNftRewardInstructionAccounts = {
  rewardData: web3.PublicKey
  user: web3.PublicKey
}

export const updateNftRewardInstructionDiscriminator = [
  218, 253, 179, 73, 53, 244, 56, 85,
]

/**
 * Creates a _UpdateNftReward_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category UpdateNftReward
 * @category generated
 */
export function createUpdateNftRewardInstruction(
  accounts: UpdateNftRewardInstructionAccounts,
  args: UpdateNftRewardInstructionArgs
) {
  const { rewardData, user } = accounts

  const [data] = updateNftRewardStruct.serialize({
    instructionDiscriminator: updateNftRewardInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: rewardData,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: user,
      isWritable: false,
      isSigner: true,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey(
      'F6mQpwzq6MtV4GxPeVL9TU6PDpUNBwd3z6rxRP26Sf5p'
    ),
    keys,
    data,
  })
  return ix
}
